<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <springProperty scope="context" name="serviceName" source="spring.application.name"
                    defaultValue="service"/>
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- encoders are by default assigned the type ch.qos.logback.classic.encoder.PatternLayoutEncoder -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <encoder>
            <pattern>%date %level [%thread] %X{x-request-id}:::${serviceName}:::%msg%n</pattern>
        </encoder>
    </appender>
    <!--
    jdbc.sqlonly 	Logs only SQL. SQL executed within a prepared statement is automatically shown with it's bind arguments replaced with the data bound at that position, for greatly increased readability.
    jdbc.sqltiming 	Logs the SQL, post-execution, including timing statistics on how long the SQL took to execute.
    jdbc.audit 	Logs ALL JDBC calls except for ResultSets. This is a very voluminous output, and is not normally needed unless tracking down a specific JDBC problem.
    jdbc.resultset 	Even more voluminous, because all calls to ResultSet objects are logged.
    jdbc.resultsettable 	Log the jdbc results as a table. Level debug will fill in unread values in the result set.
    jdbc.connection 	Logs connection open and close events as well as dumping all open connection numbers. This is very useful for hunting down connection leak problems.
    -->
    <root level="INFO">
        <appender-ref ref="STDOUT"/>
    </root>
</configuration>
